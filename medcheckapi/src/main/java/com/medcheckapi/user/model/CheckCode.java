package com.medcheckapi.user.model;

import jakarta.persistence.*;
import java.time.*;
import java.time.ZoneId;

/**
 * Rotating short-lived code generated by a PRECEPTOR each minute, used by ALUNO to validate check-in.
 */
@Entity
@Table(name = "check_codes", indexes = {
        @Index(name = "idx_checkcode_preceptor_time", columnList = "preceptor_id,generated_at")
})
public class CheckCode {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @ManyToOne(optional = false)
    @JoinColumn(name = "preceptor_id")
    private User preceptor;

    @Column(length = 12, nullable = false)
    private String code;

    @Column(name = "generated_at", nullable = false)
    private LocalDateTime generatedAt;

    @Column(name = "expires_at", nullable = false)
    private LocalDateTime expiresAt;

    // Quantas vezes este código foi utilizado em um check-in válido
    @Column(name = "usage_count", nullable = false)
    private int usageCount = 0;

    // Última vez que foi acessado / validado (para política de limpeza)
    @Column(name = "last_accessed_at")
    private LocalDateTime lastAccessedAt;

    public Long getId() { return id; }
    public void setId(Long id) { this.id = id; }
    public User getPreceptor() { return preceptor; }
    public void setPreceptor(User preceptor) { this.preceptor = preceptor; }
    public String getCode() { return code; }
    public void setCode(String code) { this.code = code; }
    public LocalDateTime getGeneratedAt() { return generatedAt; }
    public void setGeneratedAt(LocalDateTime generatedAt) { this.generatedAt = generatedAt; }
    public LocalDateTime getExpiresAt() { return expiresAt; }
    public void setExpiresAt(LocalDateTime expiresAt) { this.expiresAt = expiresAt; }
    public int getUsageCount() { return usageCount; }
    public void setUsageCount(int usageCount) { this.usageCount = usageCount; }
    public LocalDateTime getLastAccessedAt() { return lastAccessedAt; }
    public void setLastAccessedAt(LocalDateTime lastAccessedAt) { this.lastAccessedAt = lastAccessedAt; }

    @Transient
    public long getSecondsRemaining() {
        // Usa o mesmo fuso fixo configurado na aplicação (GMT-5) para evitar discrepâncias de countdown
        ZoneId zone = ZoneId.of("GMT-5");
        return Math.max(0, Duration.between(LocalDateTime.now(zone), expiresAt).getSeconds());
    }
}
